{"version":3,"file":"index.js","sources":["../src/index.ts"],"sourcesContent":["export interface TreeNode {\r\n    char: string;\r\n    weight: number;\r\n    left: TreeNode | null;\r\n    right: TreeNode | null;\r\n}\r\n\r\n/** Закодируем текст */\r\nexport function encode(text: string, codes: Map<string, string>): Array<string> {\r\n    const result: Array<string> = [];\r\n    for (const char of text) {\r\n        result.push(codes.get(char)!);\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nexport function decodeString(\r\n    encodedText: string,\r\n    codes: Map<string, string>\r\n  ): string {\r\n    const reversedCodes = reverseMap(codes);\r\n    let result = \"\";\r\n    let currentBinary = \"\";\r\n    for (const item of encodedText) {\r\n      currentBinary += item;\r\n      if (reversedCodes.has(currentBinary)) {\r\n        const decodedChar = reversedCodes.get(currentBinary);\r\n        result += decodedChar;\r\n        currentBinary = \"\";\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  function reverseMap<K, V>(map: Map<K, V>) {\r\n    const result = new Map<V, K>();\r\n    map.forEach((v, k) => {\r\n      result.set(v, k);\r\n    });\r\n    return result;\r\n  }\r\n  \r\n/** Декодируем текст */\r\nexport function decode(encodedText: Array<string>, codes: Map<string, string>): string {\r\n    let result = '';\r\n\r\n    const reversedCodes: Record<string, string> = {};\r\n    Array.from(codes.entries()).forEach(([key, value]) => {\r\n        reversedCodes[value] = key;\r\n    });\r\n\r\n    for (const code of encodedText) {\r\n        result += reversedCodes[code];\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/** Функция получения энтропии */\r\nexport function getEntropyOfText(text: string): number {\r\n    const relFreq: Array<any> = getRelativeFrequency(getCharsFrequency(text));\r\n    let entropy = 0;\r\n\r\n    for (let i = 0; i < relFreq.length; i++) {\r\n        entropy += relFreq[i][1] * Math.log2(relFreq[i][1]);\r\n    }\r\n    return -entropy;\r\n}\r\n\r\n/** Получаем каждый символ из карты массива */\r\nexport function getCharCodesFromSource(text: string): Map<string, string> {\r\n    const freqArr = getCharsFrequency(text);\r\n    const tree = getTree(freqArr);\r\n\r\n    const codes: Map<string, string> = new Map(); // Array with symbols and codes\r\n\r\n    getCodes(tree, (char, code) => {\r\n        codes.set(char, code);\r\n    });\r\n    return codes;\r\n}\r\n\r\nconst getCodes = (\r\n    tree: TreeNode | null,\r\n    cb: (char: string, code: string) => void,\r\n    code = '',\r\n): void => {\r\n    if (!tree) {\r\n        return;\r\n    }\r\n\r\n    if (!tree.left && !tree.right) {\r\n        cb(tree.char, code);\r\n        return;\r\n    }\r\n\r\n    getCodes(tree.left, cb, code + '0');\r\n    getCodes(tree.right, cb, code + '1');\r\n};\r\n\r\n/** Относительная частота */\r\nexport function getRelativeFrequency(arr: Array<any>): Array<any> {\r\n    let length = 0;\r\n    const resArr: Array<any> = [];\r\n    for (let i = 0; i < arr.length; i++) {\r\n        length += arr[i][1];\r\n    }\r\n    for (let i = 0; i < arr.length; i++) {\r\n        const relFreq = arr[i][1] / length;\r\n        resArr.push([arr[i][0], relFreq]);\r\n    }\r\n\r\n    return resArr;\r\n}\r\n\r\n/** Рассчитываем частоту построения графиков */\r\nexport function getCharsFrequency(text: string): [string, number][] {\r\n    const freq: Map<string, number> = new Map();\r\n\r\n    for (const char of text) {\r\n        const count = freq.get(char);\r\n        freq.set(char, count ? count + 1 : 1);\r\n    }\r\n\r\n    return Array.from(freq).sort((a, b) => b[1] - a[1]); // descending\r\n}\r\n\r\n/** Сделаем дерево хаффмана */\r\nexport function getTree(freq: [string, number][]): TreeNode {\r\n    const nodes: TreeNode[] = [];\r\n\r\n    for (const [char, weight] of freq) {\r\n        nodes.push({char, weight, left: null, right: null});\r\n    }\r\n\r\n    while (nodes.length > 1) {\r\n        nodes.sort((a, b) => a.weight - b.weight);\r\n\r\n        const left = nodes.shift()!;\r\n        const right = nodes.shift()!;\r\n\r\n        const parent: TreeNode = {char: '', weight: left?.weight + right?.weight, left, right};\r\n\r\n        nodes.push(parent);\r\n    }\r\n\r\n    return nodes[0];\r\n}\r\n"],"names":[],"mappings":"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"}